<?php

namespace Ijideals\CatalogManager\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\Gate;
use Ijideals\CatalogManager\Models\Category; // As per your config

class CategoryController extends Controller
{
    protected $categoryModelClass;

    public function __construct()
    {
        // Middleware for platform admin authorization for all category management
        // This assumes a 'manage_catalog_categories' permission or similar for platform admins.
        // $this->middleware('can:manage_catalog_categories')->except(['index', 'show']);
        // For now, let's assume a simpler check or direct role check.
        // Public viewing is allowed.
        $this->middleware('auth:api')->except(['index', 'show']);

        $this->categoryModelClass = config('catalog-manager.category_model', Category::class);
    }

    /**
     * Display a listing of the resource.
     * Can include children recursively or only top-level.
     */
    public function index(Request $request)
    {
        $query = $this->categoryModelClass::query();

        if ($request->boolean('top_level_only', true)) {
            $query->whereNull('parent_id');
        }

        if ($request->boolean('with_children', true)) {
            $query->with('descendants'); // Eager load all descendants
        } elseif ($request->boolean('with_direct_children', false)) {
            $query->with('children');
        }

        // TODO: Add search/filter if needed in future

        $categories = $query->orderBy('name')
            ->paginate(config('catalog-manager.pagination_items.categories', 20));

        // TODO: Use API Resource for transformation
        return response()->json($categories);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        // Authorization check (e.g., platform admin)
        // if (Auth::user()->cannot('create', $this->categoryModelClass)) {
        //     return response()->json(['message' => 'Unauthorized'], 403);
        // }


        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'parent_id' => 'nullable|exists:'.app($this->categoryModelClass)->getTable().',id',
            // 'slug' => 'sometimes|string|max:255|unique:'.$this->categoryModelClass->getTable().',slug' // Slug is auto-generated
        ]);

        // Slug is auto-generated by model mutator if not provided or if name changes
        $category = $this->categoryModelClass::create($validatedData);

        return response()->json($category, 201);
    }

    /**
     * Display the specified resource.
     */
    public function show(string $slugOrId)
    {
        $category = $this->findCategory($slugOrId);
        if (!$category) {
            return response()->json(['message' => 'Category not found.'], 404);
        }
        // Optionally load children/products
        // $category->load(['children', 'products']);
        return response()->json($category->load('parent', 'children'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $slugOrId)
    {
        $category = $this->findCategory($slugOrId);
        if (!$category) {
            return response()->json(['message' => 'Category not found.'], 404);
        }

        // Authorization check
        // if (Auth::user()->cannot('update', $category)) {
        //     return response()->json(['message' => 'Unauthorized'], 403);
        // }

        $validatedData = $request->validate([
            'name' => 'sometimes|required|string|max:255',
            'description' => 'nullable|string',
            'parent_id' => 'nullable|exists:'.app($this->categoryModelClass)->getTable().',id',
            'slug' => 'sometimes|string|max:255|unique:'.$category->getTable().',slug,'.$category->id,
        ]);

        // Prevent setting parent_id to self or a descendant
        if (isset($validatedData['parent_id']) && $validatedData['parent_id']) {
            if ($validatedData['parent_id'] == $category->id) {
                return response()->json(['message' => 'Cannot set category as its own parent.'], 422);
            }
            // More complex check for descendant needed if dealing with deep trees
        }


        $category->update($validatedData);

        return response()->json($category);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $slugOrId)
    {
        $category = $this->findCategory($slugOrId);
        if (!$category) {
            return response()->json(['message' => 'Category not found.'], 404);
        }

        // Authorization check
        // if (Auth::user()->cannot('delete', $category)) {
        //     return response()->json(['message' => 'Unauthorized'], 403);
        // }

        // Consider what happens to products in this category (disassociate or delete if exclusive?)
        // Consider what happens to child categories (promote or delete cascade - migration handles cascade)
        $category->delete();

        return response()->json(['message' => 'Category deleted successfully.'], 200);
    }

    protected function findCategory(string $slugOrId): ?Category
    {
        $query = $this->categoryModelClass::query();
        if (is_numeric($slugOrId)) {
            return $query->find((int)$slugOrId);
        }
        return $query->where('slug', $slugOrId)->first();
    }
}
